# -*- coding: utf-8 -*-
"""Копия 2.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpt4Wdw_gzuF8bpy46rIZ-2QijoOxzY
"""

from math import factorial
import numpy as np
import math
import statistics

print('Задание 1.')

# Даны значения величины заработной платы заемщиков банка (zp) и значения их
# поведенческого кредитного скоринга (ks):

zp = [35, 45, 190, 200, 40, 70, 54, 150, 120, 110]
ks = [401, 574, 874, 919, 459, 739, 653, 902, 746, 832]

# Найдите ковариацию этих двух величин с помощью элементарных действий, а затем с
# помощью функции cov из numpy. Полученные значения должны быть равны. Найдите
# коэффициент корреляции Пирсона с помощью ковариации и среднеквадратичных
# отклонений двух признаков, а затем с использованием функций из библиотек numpy
# и pandas.

Mzp = np.mean(zp)

Mks = np.mean(ks)

mult = ([(x - Mzp) * (y - Mks) for x, y in zip(zp, ks)])

print('Коэффициент ковариации, вычисленный вручную:', (sum(mult)) / 10)
print('Коэффициент ковариации, функция Python:', np.cov(zp, ks, ddof = 0)[0, 1])

print('Задание 2.')

# Измерены значения IQ выборки студентов, обучающихся в местных технических вузах:
# 131, 125, 115, 122, 131, 115, 107, 99, 125, 111. Известно, что в генеральной
# совокупности IQ распределен нормально. Найдите доверительный интервал для
# математического ожидания с надежностью 0.95.

IQ = [131, 125, 115, 122, 131, 115, 107, 99, 125, 111]

n = 10

M = np.mean(IQ)

D = np.std(IQ)

Zt = 2.262

def z(a, b, c):
  return (a * b) / np.sqrt(c)

zc = z(Zt, D, n)

def interval(a, b):
  gap = []
  lower_edge = a - b
  higher_edge = a + b
  gap.append(lower_edge)
  gap.append(higher_edge)
  return gap

interval = interval(M, zc)

print('Доверительный интервал', ["{:.3f}".format(i) for i in interval])

print('Задание 3.')

# Известно, что рост футболистов в сборной распределен нормально с дисперсией
# генеральной совокупности, равной 25 кв.см. Объем выборки равен 27, среднее
# выборочное составляет 174.2. Найдите доверительный интервал для математического
# ожидания с надежность 0,95

Mx = 174.2

Dx = 25

Stdx = 5

n = 27

Zt = 1.96

def z(a, b, c):
  return (a * b) / np.sqrt(c)

zc = z(Zt, Stdx, n)

def interval(a, b):
  gap = []
  lower_edge = a - b
  higher_edge = a + b
  gap.append(lower_edge)
  gap.append(higher_edge)
  return gap

interval = interval(Mx, zc)

print('Доверительный интервал', ["{:.3f}".format(i) for i in interval])